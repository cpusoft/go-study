package main

import (
	"encoding/asn1"
	"encoding/hex"
	"fmt"

	"github.com/cpusoft/goutil/jsonutil"
)

type AsProviderAttestation struct {
	Version int `json:"version"` //default 1
	//AddressFamilyIdentifier Afi            `json:"addressFamilyIdentifier" asn1:"optional"`
	CustomerAsId int   `json:"customerAsId"`
	ProviderAss  []int `json:"ProviderAsIds"`
}
type VersionModel struct {
	Version int
}
type ProviderAs struct {
	ProviderAsId int `json:"providerAsId"`
	//AddressFamilyIdentifier Afi `json:"addressFamilyIdentifier" asn1:"optional"`
}
type Afi []byte

type AsProviderRaw struct {
	Version    VersionV `asn1:"class:2,tag:0"` //asn1.RawValue
	CustomerAs int      //asn1.RawValue   //`asn1:"explicit,tag:5"`
	Proviers   []int    //`asn1:"explicit,tag:5"`
}
type VersionV struct {
	Version int
}

func (a Afi) MarshalText() ([]byte, error) {
	//return []byte(`[` + convert.PrintBytesOneLine(a) + `]`), nil
	s := fmt.Sprintf("%#x", a)
	return []byte(s), nil
}
func main() {
	//hexStr := `30240203033979301D3005020300FDE83009020300FDE9040200013009020300FDEA04020002`
	hexStr := ``
	by, err := hex.DecodeString(hexStr)
	fmt.Println(len(by), err)
	asProviderRaw := AsProviderRaw{}
	_, err = asn1.Unmarshal(by, &asProviderRaw)
	fmt.Println(jsonutil.MarshalJson(asProviderRaw))

}
