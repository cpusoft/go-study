package main

import (
	"encoding/asn1"
	"fmt"
	"time"
)

type ManifestParse struct {
	ManifestNumber int64                 `json:"mainfestNumber"`
	ThisUpdate     time.Time             `asn1:"generalized" json:"thisUpdate"`
	NextUpdate     time.Time             `asn1:"generalized" json:"nextUpdate"`
	FileHashAlg    asn1.ObjectIdentifier `json:"fileHashAlg"`
	FileList       []FileAndHashParse    `json:"fileList"`
}
type FileAndHashParse struct {
	File string         `asn1:"ia5" json:"file"`
	Hash asn1.BitString `json:"hash"`
}

func main() {
	//openssl asn1parse -in err20180807.mft -inform DER
	/*
		   39:d=4  hl=2 l=  11 prim: OBJECT            :1.2.840.113549.1.9.16.1.26
		   52:d=4  hl=2 l=inf  cons: cont [ 0 ]
		   54:d=5  hl=2 l=inf  cons: OCTET STRING
		   56:d=6  hl=3 l= 137 prim: OCTET STRING      [HEX DUMP]:308186020200CA180F323031383036323831373030
		32345A180F32303138303632393138303032345A060960864801650304020130533051162C36353736393433633735383262
		3164656266666261303564363235343034323462633765626363352E63726C032100154269177B0346014642A367DA415F32
		C2BFE7C4EAD8AED59ACCF8F20220F89C

	*/
	mft := ManifestParse{}
	mfts := []ManifestParse{}
	mftByte := []byte{0x30, 0x81, 0x86, 0x02, 0x02,
		0x00, 0xCA, 0x18, 0x0F, 0x32, 0x30, 0x31, 0x38, 0x30, 0x36, 0x32, 0x38, 0x31, 0x37, 0x30, 0x30,
		0x32, 0x34, 0x5A, 0x18, 0x0F, 0x32, 0x30, 0x31, 0x38, 0x30, 0x36, 0x32, 0x39, 0x31, 0x38, 0x30,
		0x30, 0x32, 0x34, 0x5A, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x01, 0x30,
		0x53, 0x30, 0x51, 0x16, 0x2C, 0x36, 0x35, 0x37, 0x36, 0x39, 0x34, 0x33, 0x63, 0x37, 0x35, 0x38,
		0x32, 0x62, 0x31, 0x64, 0x65, 0x62, 0x66, 0x66, 0x62, 0x61, 0x30, 0x35, 0x64, 0x36, 0x32, 0x35,
		0x34, 0x30, 0x34, 0x32, 0x34, 0x62, 0x63, 0x37, 0x65, 0x62, 0x63, 0x63, 0x35, 0x2E, 0x63, 0x72,
		0x6C, 0x03, 0x21, 0x00, 0x15, 0x42, 0x69, 0x17, 0x7B, 0x03, 0x46, 0x01, 0x46, 0x42, 0xA3, 0x67,
		0xDA, 0x41, 0x5F, 0x32, 0xC2, 0xBF, 0xE7, 0xC4, 0xEA, 0xD8, 0xAE, 0xD5, 0x9A, 0xCC, 0xF8, 0xF2,
		0x02, 0x20, 0xF8, 0x9C}

	asn1.Unmarshal(mftByte, &mft)
	fmt.Printf("mftByte-->mft: %+v\r\n", mft)

	asn1.Unmarshal(mftByte, &mfts)
	fmt.Printf("mftByte-->mfts: %+v\r\n", mfts)

}
