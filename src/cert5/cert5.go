package main

import (
	"encoding/asn1"
	"fmt"
)

type RouteOriginAttestation struct {
	AsID         ASID
	IpAddrBlocks []ROAIPAddressFamily
}
type ASID int64
type ROAIPAddressFamily struct {
	AddressFamily []byte
	Addresses     []ROAIPAddress
}
type ROAIPAddress struct {
	Address   asn1.BitString
	MaxLength int64 `asn1:"optional"`
}
type IPAddress asn1.BitString

func main() {
	roas := []RouteOriginAttestation{}
	roa := RouteOriginAttestation{}
	roaBytes := []byte{0xA0, 0x1B, 0x04, 0x19, 0x30, 0x17, 0x02, 0x03,
		0x00, 0xDA, 0xC2, 0x30, 0x10, 0x30, 0x0E, 0x04, 0x02, 0x00,
		0x01, 0x30, 0x08, 0x30, 0x06, 0x03, 0x04, 0x02, 0x67, 0x0C, 0xE8}

	roaByte := []byte{0x04, 0x19, 0x30, 0x17, 0x02, 0x03,
		0x00, 0xDA, 0xC2, 0x30, 0x10, 0x30, 0x0E, 0x04, 0x02, 0x00,
		0x01, 0x30, 0x08, 0x30, 0x06, 0x03, 0x04, 0x02, 0x67, 0x0C, 0xE8}

	roaBytesub := []byte{0x30, 0x17, 0x02, 0x03,
		0x00, 0xDA, 0xC2, 0x30, 0x10, 0x30, 0x0E, 0x04, 0x02, 0x00,
		0x01, 0x30, 0x08, 0x30, 0x06, 0x03, 0x04, 0x02, 0x67, 0x0C, 0xE8}

	asn1.Unmarshal(roaBytes, &roas)
	fmt.Printf("roaBytes-->roas: %+v\r\n", roas)
	asn1.Unmarshal(roaBytes, &roa)
	fmt.Printf("roaBytes-->roa: %+v\r\n", roa)

	asn1.Unmarshal(roaByte, &roas)
	fmt.Printf("roaByte-->roas: %+v\r\n", roas)
	asn1.Unmarshal(roaByte, &roa)
	fmt.Printf("roaByte-->roa: %+v\r\n", roa)

	asn1.Unmarshal(roaBytesub, &roas)
	fmt.Printf("roaBytesub-->roas: %+v\r\n", roas)
	asn1.Unmarshal(roaBytesub, &roa)
	fmt.Printf("roaBytesub-->roa: %+v\r\n", roa)

	roaBytesub2 := []byte{0x30, 0x43, 0x02, 0x02, 0x6D, 0x90,
		0x30, 0x3D, 0x30, 0x27, 0x04, 0x02,
		0x00, 0x01, 0x30, 0x21, 0x30, 0x09, 0x03, 0x04, 0x06, 0xBE,
		0x70, 0x40, 0x02, 0x01, 0x14, 0x30,
		0x09, 0x03, 0x04, 0x06, 0xBF, 0x67, 0x00, 0x02, 0x01, 0x13,
		0x30, 0x09, 0x03, 0x04, 0x03, 0xC8,
		0x5B, 0x20, 0x02, 0x01, 0x18, 0x30, 0x12, 0x04, 0x02, 0x00,
		0x02, 0x30, 0x0C, 0x30, 0x0A, 0x03,
		0x05, 0x00, 0x28, 0x03, 0xEA, 0x80, 0x02, 0x01, 0x20}

	asn1.Unmarshal(roaBytesub2, &roa)
	fmt.Printf("roaBytesub2-->roa: %+v\r\n", roa)
}
