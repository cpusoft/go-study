package main

import (
	"crypto/x509"
	"encoding/asn1"
	"encoding/pem"
	"fmt"
)

/*
http://cncc.bingj.com/cache.aspx?q=golang+x509.NewCertPool()+root+intermediate&d=4761965247665648&mkt=zh-CN&setlang=zh-CN&w=b62xT9obHKJ1fcEHiuW0sOaadTKA0I23
https://github.com/golang/go/issues/28971#
package main

import (
	"crypto/rand"
	"crypto/rsa"
	"crypto/x509"
	"crypto/x509/pkix"
	"encoding/pem"
	"fmt"
	"log"
	"math/big"
	"os"
	"time"
)

func saveCertificate(cert *x509.Certificate, path string) {
	certOut, _ := os.Create(path)
	pem.Encode(certOut, &pem.Block{Type: "CERTIFICATE", Bytes: cert.Raw})
	certOut.Close()
}

func savePrivateKey(key *rsa.PrivateKey, path string) {
	keyOut, _ := os.OpenFile(path, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0600)
	pem.Encode(keyOut, &pem.Block{Type: "RSA PRIVATE KEY", Bytes: x509.MarshalPKCS1PrivateKey(key)})
	keyOut.Close()
}
func main() {
	rootCertTemplate := &x509.Certificate{
		SerialNumber: big.NewInt(1653),
		Subject: pkix.Name{
			CommonName: "Root",
		},
		NotBefore:             time.Now(),
		NotAfter:              time.Now().AddDate(10, 0, 0),
		IsCA:                  true,
		KeyUsage:              x509.KeyUsageDigitalSignature | x509.KeyUsageCertSign,
		BasicConstraintsValid: true,
		MaxPathLen:            0,
		MaxPathLenZero:        true,
	}

	rootPriv, _ := rsa.GenerateKey(rand.Reader, 2048)
	rootPub := &rootPriv.PublicKey
	rootCertBytes, err := x509.CreateCertificate(rand.Reader, rootCertTemplate, rootCertTemplate, rootPub, rootPriv)
	if err != nil {
		log.Println("create ca failed", err)
		return
	}
	rootCert, _ := x509.ParseCertificate(rootCertBytes)

	saveCertificate(rootCert, "root.crt")
	savePrivateKey(rootPriv, "root.key")

	intermediateCertTemplate := &x509.Certificate{
		SerialNumber: big.NewInt(1658),
		Subject: pkix.Name{
			CommonName: "Intermediate",
		},
		NotBefore:             time.Now(),
		NotAfter:              time.Now().AddDate(10, 0, 0),
		SubjectKeyId:          []byte{1, 2, 3, 4, 6},
		KeyUsage:              x509.KeyUsageDigitalSignature | x509.KeyUsageCertSign,
		IsCA:                  true,
		BasicConstraintsValid: true,
		MaxPathLen:            0,
		MaxPathLenZero:        true,
	}
	intermediatePriv, _ := rsa.GenerateKey(rand.Reader, 2048)
	intermediatePub := &intermediatePriv.PublicKey

	intermediateCertBytes, err := x509.CreateCertificate(rand.Reader, intermediateCertTemplate, rootCert, intermediatePub, rootPriv)
	intermediateCert, _ := x509.ParseCertificate(intermediateCertBytes)

	saveCertificate(intermediateCert, "intermediate.crt")
	savePrivateKey(intermediatePriv, "intermediate.key")

	leafCertTemplate := &x509.Certificate{
		SerialNumber: big.NewInt(1680),
		Subject: pkix.Name{
			CommonName: "Leaf",
		},
		NotBefore:    time.Now(),
		NotAfter:     time.Now().AddDate(10, 0, 0),
		SubjectKeyId: []byte{1, 2, 3, 4, 7},
		KeyUsage:     x509.KeyUsageDigitalSignature,
	}
	leafPriv, _ := rsa.GenerateKey(rand.Reader, 2048)
	leafPub := &leafPriv.PublicKey

	leafCertBytes, err := x509.CreateCertificate(rand.Reader, leafCertTemplate, intermediateCert, leafPub, intermediatePriv)
	leafCert, _ := x509.ParseCertificate(leafCertBytes)

	saveCertificate(leafCert, "leaf.crt")
	savePrivateKey(leafPriv, "leaf.key")

	roots := x509.NewCertPool()
	roots.AddCert(rootCert)

	intermediates := x509.NewCertPool()
	intermediates.AddCert(intermediateCert)

	opts := x509.VerifyOptions{
		Roots:         roots,
		Intermediates: intermediates,
	}
	_, err = leafCert.Verify(opts)
	if err != nil {
		fmt.Println("Verification failed: ", err.Error())
		return
	}
	fmt.Printf("Success!\n")
}
*/

/*
https://github.com/golang/go/issues/10459
https://go-review.googlesource.com/c/go/+/9390/

https://groups.google.com/forum/#!msg/golang-nuts/IrzoZlwalTQ/qdK1k-ogeHIJ
You are likely to be the only ever user of this, so I'm more inclined to think about solving the more general problem. What if there was a x509.ParseCertificateWithKnownExtensions(asn1Data []byte, oids []asn1.ObjectIdentifer)?  (That name is sadly long but it's the best I can come up with at the moment.)
The given OIDs would be accepted, even if critical, and stored in Certificate.Extensions as normal. From there, you could parse anything you need outside of the standard libraries.

*/
func main() {
	const rootPEM = `-----BEGIN CERTIFICATE-----
MIIEtzCCA5+gAwIBAgIJAM0VS0WczEArMA0GCSqGSIb3DQEBCwUAMCYxJDAiBgNV
BAMTG2FwbmljLXJwa2ktcm9vdC1pYW5hLW9yaWdpbjAeFw0xODA5MjcwMDMwMDNa
Fw0yMzA5MjYwMDMwMDNaMCYxJDAiBgNVBAMTG2FwbmljLXJwa2ktcm9vdC1pYW5h
LW9yaWdpbjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMfUVki+tWAA
GLphIlPM/Kh9hE1SC9NYpcWZcyC/SWEjkTDeQprX/FdiW5SHmpUqoDkxo70oxLIl
e97Ou82ECOwv4kjm/ern9/7POjam8Q4hUBjfKhu0TXHYFblJQInZfFsbyzSPFYam
wAebkoPzKy3kjr10Y2tONVabQMSIXBswzL5QCUcJK2CvzKPD+BNq0kIMKgoGntHm
2NQrCdwo34uuwtZ8O6F6iSaL71yeGqRphL/Gs9tziwuioueFJfxOsZNtuwRbbahV
d2DLSseNh3AnA1WWctNZ+yY87zvHHGl5hyIEe7rZ6oQUTTauV3OWYW5K1LDbYiZq
2c1ZYFOjrtMCAwEAAaOCAeYwggHiMEoGA1UdIAEB/wRAMD4wPAYIKwYBBQUHDgIw
MDAuBggrBgEFBQcCARYiaHR0cHM6Ly93d3cuYXBuaWMubmV0L1JQS0kvQ1BTLnBk
ZjAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQEAwIBBjAdBgNVHQ4EFgQUC5zK
kN0Neoo3ZmsZIX/g2EA3t6IwggEGBggrBgEFBQcBCwSB+TCB9jBPBggrBgEFBQcw
BYZDcnN5bmM6Ly9ycGtpLmFwbmljLm5ldC9yZXBvc2l0b3J5LzgzOERCMjE0MTY2
NTExRTJCM0JDMjg2MTcyRkQxRkYyLzBuBggrBgEFBQcwCoZicnN5bmM6Ly9ycGtp
LmFwbmljLm5ldC9yZXBvc2l0b3J5LzgzOERCMjE0MTY2NTExRTJCM0JDMjg2MTcy
RkQxRkYyL0M1ektrTjBOZW9vM1ptc1pJWF9nMkVBM3Q2SS5tZnQwMwYIKwYBBQUH
MA2GJ2h0dHBzOi8vcnJkcC5hcG5pYy5uZXQvbm90aWZpY2F0aW9uLnhtbDAhBggr
BgEFBQcBCAEB/wQSMBCgDjAMMAoCAQECBQD/////MCcGCCsGAQUFBwEHAQH/BBgw
FjAJBAIAATADAwEAMAkEAgACMAMDAQAwDQYJKoZIhvcNAQELBQADggEBAJif3hsg
jrAhYlVrXew6EerMOdq/6hMV9sbjqhDwr7CwzACH0oEkqyN6K8r5qB3D7sc2Sz8x
9/VNrXH5fQlRUglv6477ApFu5MtrGbRzQtE4v4B1vpsixWaEWktalcHyH8WaOtoU
JwhTw/PgU6y2fjr/0ly74NEv9IVF7mLe+8Pn7aHKeS+2Zde9tORpDHgIYPx0hIOI
r4Jz4KKsIDrmg8rSIlM3PIjmA0A1423YKg7rKVtvpjCmshRaRPaOygLDw6ae5vh3
fGOnWOBCsTuAyI8kPQkDudtGmmlIKbALM6Ru8csjJztwWtJts/3N6l32wZmvWKZ1
/EqXi7yX7+LPOFs=
-----END CERTIFICATE-----`

	const interPEM = `-----BEGIN CERTIFICATE-----
MIIF2TCCBMGgAwIBAgICAJswDQYJKoZIhvcNAQELBQAwJjEkMCIGA1UEAxMbYXBu
aWMtcnBraS1yb290LWlhbmEtb3JpZ2luMB4XDTE5MDMyNTIyNDUxNloXDTE5MDky
NjA4NDUxMVowWjElMCMGA1UEAxMcYXBuaWMtcnBraS1yb290LWludGVybWVkaWF0
ZTExMC8GA1UEBRMoOTgxNDJDOUQwQjQxQTNCOUZCNjAzRDc2OTg0ODIzNkZEMUYz
MTkyNDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAN85BMV507DSFoSw
h6zBMBdKFyidF1mzm+Cwsvf+ccxhECsZvqpo7v0ggQSNeObfhgWMpJXKgaUn+F9p
dXkHhSO/wcZd7O2JsB9nLP4Vo3kIG7l0AODh7AEabovCRiTY5L3l0dTBLaFjrEp5
JO6TTXEYkNLlVQHPba6rVdK/FlhF9DF4t2GcQwHe1dFkYe4A5AcQC0T0gy9DQeuE
tAgkwTpqh9CJUTM9Xh4A9teBJuUQfRFTiQtlMGMeSidVOFTPOVZfiXJINvyH6nEy
OiMM6xKBM2HgCi9j61Pux33CNGeTLLSfcP48Zy78uYZ24+gOndv+ERymLGat+a1O
doY470kCAwEAAaOCAtswggLXMB0GA1UdDgQWBBSYFCydC0GjuftgPXaYSCNv0fMZ
JDAfBgNVHSMEGDAWgBQLnMqQ3Q16ijdmaxkhf+DYQDe3ojAOBgNVHQ8BAf8EBAMC
AQYwDwYDVR0TAQH/BAUwAwEB/zBzBgNVHR8EbDBqMGigZqBkhmJyc3luYzovL3Jw
a2kuYXBuaWMubmV0L3JlcG9zaXRvcnkvODM4REIyMTQxNjY1MTFFMkIzQkMyODYx
NzJGRDFGRjIvQzV6S2tOME5lb28zWm1zWklYX2cyRUEzdDZJLmNybDBdBggrBgEF
BQcBAQRRME8wTQYIKwYBBQUHMAKGQXJzeW5jOi8vcnBraS5hcG5pYy5uZXQvcmVw
b3NpdG9yeS9hcG5pYy1ycGtpLXJvb3QtaWFuYS1vcmlnaW4uY2VyMEoGA1UdIAEB
/wRAMD4wPAYIKwYBBQUHDgIwMDAuBggrBgEFBQcCARYiaHR0cHM6Ly93d3cuYXBu
aWMubmV0L1JQS0kvQ1BTLnBkZjCCAQYGCCsGAQUFBwELBIH5MIH2ME8GCCsGAQUF
BzAFhkNyc3luYzovL3Jwa2kuYXBuaWMubmV0L3JlcG9zaXRvcnkvOTgwNjUyRTBC
NzdFMTFFN0E5NkEzOTUyMUE0RjRGQjQvMG4GCCsGAQUFBzAKhmJyc3luYzovL3Jw
a2kuYXBuaWMubmV0L3JlcG9zaXRvcnkvOTgwNjUyRTBCNzdFMTFFN0E5NkEzOTUy
MUE0RjRGQjQvbUJRc25RdEJvN243WUQxMm1FZ2piOUh6R1NRLm1mdDAzBggrBgEF
BQcwDYYnaHR0cHM6Ly9ycmRwLmFwbmljLm5ldC9ub3RpZmljYXRpb24ueG1sMCEG
CCsGAQUFBwEIAQH/BBIwEKAOMAwwCgIBAQIFAP////8wJwYIKwYBBQUHAQcBAf8E
GDAWMAkEAgABMAMDAQAwCQQCAAIwAwMBADANBgkqhkiG9w0BAQsFAAOCAQEAu/Za
7LcmeBMyOrdrYzrl/imxRYyyUDN229HdTEPz6AA1G3k0TGXmP6zaoFXLtrIQZRuG
aItYXzjeFTi+zP3ELO0+sf2qf5tN6YHgKndwkTAcvlQ0qG1SWmpuwcaw1IY4uOv/
9YAzaCw+1Bh/LlJiLXrJC3b6xukxI9qMhUrSQ0z5MZZKdrdM9uNGJc1SU33CXzjO
Ow9v+AHjH4Wh8lnXdyKj/I8R9CoyKia2lWDrmVTp0O3msiMKmzQrbw1rjTVh3Xxv
RcugLUczXmribjQMNULLNDzgbwhC6CA9w2n3Yd7IqiMtbfRHtI1IAl2UTJLl68L8
RWGUpz3DpNVW/CrSrQ==
-----END CERTIFICATE-----`

	const certPEM = `-----BEGIN CERTIFICATE-----
MIInhjCCJm6gAwIBAgICANAwDQYJKoZIhvcNAQELBQAwWjElMCMGA1UEAxMcYXBu
aWMtcnBraS1yb290LWludGVybWVkaWF0ZTExMC8GA1UEBRMoOTgxNDJDOUQwQjQx
QTNCOUZCNjAzRDc2OTg0ODIzNkZEMUYzMTkyNDAeFw0xOTA2MTkwNDU0MDRaFw0x
OTEyMTkxNDU0MDJaMEYxETAPBgNVBAMTCEE5MERDNUJFMTEwLwYDVQQFEyg3NDAx
NjVBODBEMTA3MTk3MEFCQzA5QzAyQjcxQzFBQzdDMUQ2RTBFMIIBIjANBgkqhkiG
9w0BAQEFAAOCAQ8AMIIBCgKCAQEAyIuRAoGEX9kHmRE9zIrt0LWKwv6blaVn7blY
8Ghmn7eDufbr1H7Xso2AUuiX2dWJkAzIJeI4e2EhGeyS7OHwyDoy2Jgp1xIgwxNj
IpqOehMMFYpOFyn8A30Qs6KKw1D6y3n/p36YENHbxGTJob6saGwJLat9+pWx40iO
Ug4t1WIMNZI0uio82rmHT9n90Nz/sepouXU6HEcsm2VjaRV4hl/ZplmW+mHE2IFa
PHj/RgaMXBIJwl3uaSjPMw14HlTcSX0rp5CCvca9rRkGXmhsujds2hZw0czeCGZK
6esvb7yh9Wp65EH8rSar6Rr9oo7v/2lhX//S7pTvr+GMLTFVYwIDAQABo4IkaDCC
JGQwHQYDVR0OBBYEFHQBZagNEHGXCrwJwCtxwax8HW4OMB8GA1UdIwQYMBaAFJgU
LJ0LQaO5+2A9dphII2/R8xkkMA4GA1UdDwEB/wQEAwIBBjAPBgNVHRMBAf8EBTAD
AQH/MHMGA1UdHwRsMGowaKBmoGSGYnJzeW5jOi8vcnBraS5hcG5pYy5uZXQvcmVw
b3NpdG9yeS85ODA2NTJFMEI3N0UxMUU3QTk2QTM5NTIxQTRGNEZCNC9tQlFzblF0
Qm83bjdZRDEybUVnamI5SHpHU1EuY3JsMH4GCCsGAQUFBwEBBHIwcDBuBggrBgEF
BQcwAoZicnN5bmM6Ly9ycGtpLmFwbmljLm5ldC9yZXBvc2l0b3J5LzgzOERCMjE0
MTY2NTExRTJCM0JDMjg2MTcyRkQxRkYyL21CUXNuUXRCbzduN1lEMTJtRWdqYjlI
ekdTUS5jZXIwSgYDVR0gAQH/BEAwPjA8BggrBgEFBQcOAjAwMC4GCCsGAQUFBwIB
FiJodHRwczovL3d3dy5hcG5pYy5uZXQvUlBLSS9DUFMucGRmMIIBBgYIKwYBBQUH
AQsEgfkwgfYwTwYIKwYBBQUHMAWGQ3JzeW5jOi8vcnBraS5hcG5pYy5uZXQvcmVw
b3NpdG9yeS9CM0EyNEYyMDFENjYxMUUyOEFDODgzN0M3MkZEMUZGMi8wbgYIKwYB
BQUHMAqGYnJzeW5jOi8vcnBraS5hcG5pYy5uZXQvcmVwb3NpdG9yeS9CM0EyNEYy
MDFENjYxMUUyOEFDODgzN0M3MkZEMUZGMi9kQUZscUEwUWNaY0t2QW5BSzNIQnJI
d2RiZzQubWZ0MDMGCCsGAQUFBzANhidodHRwczovL3JyZHAuYXBuaWMubmV0L25v
dGlmaWNhdGlvbi54bWwwgiG0BggrBgEFBQcBBwEB/wSCIaMwgiGfMIIhmwQCAAEw
giGTAwMGCIADAwQI0AMEAxdqeAMEAhdvDAMEBBfiAAMEBxfogAMEBBgpcAMEBRg1
wAMEBRjmAAMEAxjrGAMDAShIAwQHKH2AAwQGKH5AAwQGLSjAAwQHLUsAAwMBLwgD
AwAvCwMDAC8PMAoDAwAvHQMDBS8AMAoDAwIvXAMDBy8AAwMAL/cDAwI0UAMEBTSA
4AMDATSCAwMBNt4DAwA5kwMEBD+MAAMEBkAhAAMEBkA/QAMEBEB3EDAMAwQBQHhu
AwQBQHh4AwQEQLwgAwQDQM/QAwQEQRJwMAsDAwBBYwMEBUFjQAMEBUG1QAMEBUIq
IAMEBkJgwAMEBEKFUAMEBUK1oAMEBELLkAMEBELkAAMEBELoAAMEBELqoAMEAEOe
NAMEAkPVjAMEBEPXcDAMAwQCREHkAwQEREHgAwQGRE8AAwQERQZAAwQDRUhQAwQE
RV4gMAwDBARFXlADBARFXmADBAVFoAADBANFoKgDBAVFrEADBARFwqADBAZF5sAD
BAZF54ADBAZF6sADBAZF64ADBABGIjowDAMEBkeDwAMEBkeEAAMEBkeIQAMEBkeJ
ADAMAwQDSCP4AwQBSCP8AwQGSP8AAwQFSP/gAwQDSjLQAwQCSnIwAwQCSnZQAwQE
TE0wAwQFYAlAAwQGYAmAAwQGYB5AAwQHaKGAAwQEaMhwAwQFaPogAwQEaPuQAwMA
a5kDAwCAFjAKAwMAgBsDAwCAHAMDAIA1AwMAgF4DAwCAagMDAICGAwMBgLgDAwCA
+gMDAIEcAwMAgTwDAwCBTgMDAIFeAwMAgWADAwGBfgMDAIGIAwMAgbQDAwCBzAMD
AIHTAwMAgeIDAwCB+QMDAIH+AwMAghoDAwCCIgMDAII2AwMAgjgDAwCCPgMDAIJF
AwMAglcDAwCCXwMDAIJmAwMAgmkDAwCCdAMDAIJ7AwMAgoIDAwCCmQMDAIKbAwMA
gp4DAwGCwgMDAYLYAwMAgtwwDAMEAoL4bAMEB4L4AAMDAYNwAwMAg4EDAwCDkwMD
AIOqAwMAg6wDAwCDtQMDAIO5AwMAg8sDAwCDzgMDAIPVAwMAg9kDAwCD7AMDAIPy
AwMBg/QDAwCD+AMEBoSTQAMDAISaAwMAhLMwCgMDAIS1AwMAhLYDAwCE3gMDAITo
AwMAhOoDAwCGBwMDAIYSAwQChirgAwMAhksDAwCGcwMDAIaQAwMAhpQwCgMDAIaf
AwMAhqADAwCGrwMDAIayAwMAhrQDAwCGxAMDAIbQAwMAhtMDAwGG7AMEBYby4DAL
AwQDh1ToAwMAh1QDAwCHlQMEBYgWIAMEBYiP4DAKAwMAiJkDAwCImgMEB4ieADAK
AwMAiLkDAwKIuAMDAIjGMAwDBAeI5IADBASI5KADAwGI6AMDAIlEAwMAiUoDAwCJ
TAMDAIlcAwMAiWEDAwCJbQMDAIlvAwMAiYQDAwCJkzAKAwMAiZkDAwCJmgMDAImd
AwMAiaYDAwCJrAMDAIm9AwMAidsDBAeJ3IADAwCKBwMDAIoTAwMBihgDAwCKHgMD
AIosAwMAikADAwCKRwMDAIpLAwMAik0wCgMDAIpPAwMAilADAwCKZQMDAIprAwMA
ioIDAwCKwjAKAwMAitMDAwGK1AMDAIrZAwMAiusDAwCK7wMDAIrzAwMAivwDAwCL
AAMDAIsJAwMAiywDAwCLOwMDAItQAwMAi1YDAwCLZTAKAwMAi4EDAwCLggMDAIuE
AwMAi4YDAwCLlAMDAIuWAwMAi5gDAwGLmgMDAIufAwMAi6MwCgMDAIunAwMAi6gD
AwCLqjAKAwMAi68DAwCLsDAMAwQGi7RAAwQFi7TAAwMAi7cDAwCLujAKAwMCi7wD
AwCLvjAKAwMGi8ADAwGL3DAKAwMAi98DAwCL4DAKAwMBi+IDAwCL5AMDAIvmMAoD
AwCL/wMDAIwAAwMAjEsDAwCMTwMDAIxRAwQEjFLAAwMAjFMDAwCMXAMDAIxgMAoD
AwCMbQMDAIyKAwMAjI8DAwCMlQMDAIyfAwMAjKgDAwCMswMDAIzIMAoDAwCMzQMD
BIzAAwMAjNIDAwCM1QMDAIzgAwMAjOMDAwCM7QMDAIzwAwMAjPMDAwCM9jAKAwMA
jPkDAwCM+gMDAIz9AwMAjP8DAwCPQDAKAwMAj1kDAwCPWgMDAI9cAwMAj14DAwCP
YAMDAI93AwMAj30DAwCPiAMDAI+rAwMAj64DAwGPvAMEBY/AYAMDAI/JAwMAj9gD
AwCP2gMDAI/dAwMAj+4DAwCP+AMDAI/9AwMBkAADAwGQBgMDAJAMAwMAkBAwDAME
AZAkRgMEAZAkSAMEAJAkaAMEAZAkgAMEAZAkhgMEAZAkjAMEAZAkkAMEAZAklAME
AJAksAMEAJAksjAMAwQBkCS2AwQBkCS4AwQBkCS8AwQBkCTOAwQBkCTSMAwDBAGQ
JNYDBAGQJNgwDAMEApAk3AMEAJAk7AMEAZAk9AMEApAk+AMEAZAk/gMDAZA0AwMA
kDcDAwCQQgMDAJBPAwMAkGEDAwCQbgMDAJB4AwMAkHswCgMDAZCCAwMAkIwDAwCQ
xwMDAJDNMAoDAwCQ1QMDAJDWAwMAkNoDAwCQ/wMDAJILAwMAkjMDAwCSOAMDAJI+
MAwDBASSWBADBACSWBwwDAMEBZJYIAMEBZJYQAMEA5JYgAMEApJYkDAMAwQDkliY
AwQEkligMAwDBAKSWMQDBASSWMADAwCSYzAKAwMCknQDAwCSdgMDAJKQAwMAkqAD
AwCSqwMDAJKyMAsDAwCSwwMEBZLEAAMDAJLdAwMAkwYDAwCTCAMDAJMKAwMAkykD
AwCTKwMDAZMuAwMAkzIDAwCTQgMDAJNFAwMAk0wDBASTXCADBAeTXIADAwCTbQMD
AJOEAwMAk5EwCgMDAJOdAwMAk54DAwCTsAMDAJPAAwMAk8gDAwCT0TAKAwMAk9MD
AwCT1AMDAJQHAwQAlDs5AwQFlEIAMAwDBASUQjADBAWUQoAwCgMDAJRDAwMAlEQD
AwCURgMDAJSRAwMAlKEDAwCUtgMDAJTDAwMAlTYDAwCVgQMDAJWHAwMAlZADAwCV
pwMDAJWrAwMAlbADBAaV6oADBAeX0oAwCwMEBpggQAMDAJggAwMAmDQDAwKYOAMD
AJhMAwMAmFMDAwCYWwMDAZhiMAoDAwCYZQMDAJhoAwMAmHYDAwCYiAMDAJiTAwMA
mJUDAwCYmQMDAJilAwMAmOIDAwCbIAMEAJsjAQMEAZsjIgMEAZsjLgMEAJsj4gME
AJsj6DAKAwMAmzsDAwCbPAMDAJs+AwMAm0UDAwCbRzAKAwMAm48DAwCbkAMDAJug
AwMAm7sDAwCbzQMDAJvmAwMAnA0DAwCcEAMDAJwWAwMAnB8DAwCcMgMDAJw7AwMA
nD4DAwCcRQMDAJyTAwMAnJUwCQMCAJ0DAwCdFDAKAwMFnSADAwKdMAMDAJ09MAoD
AwCdPwMDAJ1SAwMAnVUwCgMDAJ1lAwMAnXYwCwMDA514AwQGnXiAAwQFnXjgAwMA
nXoDAwCdgDAKAwMAnZMDAwCdlDAKAwMAnZsDAwCdnAMDAJ2zAwQGnbnAAwMAncAD
AwCdxQMDAJ3NAwMAndMDAwCd4zALAwQGnfpAAwMAnfoDAwCd/wMDAJ4oAwMBniwD
AwCeNgMDAJ5ZAwMAnmwDAwCehAMEB56MgAMDAJ6QAwMAnp4DAwCeoQMDAJ62MAoD
AwGexgMDA57QAwMAntkDAwCfDQMDAJ8bMAsDBAafHEADAwCfHAMDAJ80AwMAn0kD
AwCfSwMDAJ9QAwMAn28DAwCfdQMDAJ+KAwMAn8ADAwCfxAMDAJ/PAwMAn9MDAwCf
4gMDAJ/kAwQEn/IQAwMAn/gDAwCgBDAKAwMAoAsDAwCgEgMEAqATEAMEAqATIAME
AqATKAMEAqATODAMAwQCoBNEAwQCoBNYAwQCoBNsAwQDoBOQAwQCoBOcAwQCoBOk
AwQCoBOwAwQCoBO4AwQCoBPMAwQCoBPkAwQCoBQQAwQCoBQkAwQCoBRMAwQCoBRo
MAwDBAKgFHQDBASgFIADBACgFNQDBACgFNgDBACgFNwDBACgFOADBACgFOQDBACg
FPADBACgFPQDBACgFPowCgMDAKAVAwMAoB4DBAOgIPADAwCgQAMDAKBKAwMAoFYD
AwCgYDALAwMAoLkDBAOgygAwCgMDAKDLAwMAoMwDAwCgzgMDAKDXAwMAoN4DBAag
54AwCgMDAKDpAwMBoOwwDAMEAKDuAQMEAKDuCgMEAKDuFAMEAKDuHgMEAKDuIAME
AKDuKAMEAKDuMwMEAKDuOAMEAKDuPgMEAKDuZDAKAwMAoO8DAwGg8DAKAwMAoPMD
AwCg/AMDAKEdAwMAoSIDAwChKzALAwMAoTEDBAKhMbgwDAMEBqExwAMEA6Ex4AMD
AKEyMAoDAwahQAMDAKFCAwMAoUsDBAehUoAwCgMDAKFdAwMAoWAwCgMDAKF1AwMA
oXYDAwChegMDAKF+AwMAoYsDAwGhjgMDAKGSAwMAoZgDAwChvQMDAKHIAwMAoc8D
AwCh5QMDAKH2AwMAofgDAwCiBAMDAKIOAwMAojgDAwCiPgMDAKJpAwMAonAwCgMD
AKKRAwMCopADBAKi2IwDBAOi2yADBAOi21ADBAKi3UwDBAOi36gDBAKi9XwDBAOi
9wADBAKi/RADBAKi/zADAwCkKwMDAKQuAwQHpDQAAwQFpDTAAwMApDUwCgMDAKRF
AwMDpEADAwCkSwMDAKROAwMApFADAwCkYQMDAKRkAwMApGwDAwCkcAMDAKRzAwMB
pHwwCgMDAKShAwMApKIDAwCkpAMDAKUMAwMBpQ4wCgMDAKURAwMApRIDAwClFQMD
AKUfAwMBpSoDAwClQwMDAKVFAwMApUwDAwClVAMDAKVWAwMApV0DAwClYDAKAwMA
pWMDAwClZgMDAKVsAwMApXYDAwGlhDAKAwMApY0DAwCljgMEBqWtAAMDAaW6AwMA
pb8DAwClwgMDAKXKAwMApc0DAwCl0QMDAKXVAwMApdwDAwGl5DAKAwMEpfADAwCl
9AMDAKX2AwMBpkADAwCmTwMDAKZRAwMAplMDAwCmZDAKAwMApmcDAwCmaAMDAKZq
AwMApm8wCgMDAaZ2AwMBpngDAwCmfQMDAKceAwMAp2cDAwCnewMDAKeCAwMAp4sD
AwCnogMDAKepAwMAp68DAwCnswMDAKe9AwMAp80DBASn2zADBAWn3OADAwCoRgMD
AahOAwMAqF8DAwCoagMDAKhzAwMAqHgDAwCofjAKAwMBqIIDAwCohAMDAKiGAwMA
qIwwCgMDA6iYAwMAqJoDAwCooAMDAKi6AwMAqLwDAwCoxgMDAKjZAwMAqNsDBAKo
9bwDAwGo+AMDAKj8AwMAqYoDAwCpjAMDAKmVAwMAqckDAwSp0AMDAKohAwMAqiYD
BAKqTLADAwCqXwMDAKpqAwMAqp0DAwCqpQMDAKqzAwQAqsf2AwQBqvgAAwQBqvgM
AwQBqvgqAwQBqvguAwQBqviKMAwDBAWq+KADBAKq+KgDBAGq+L4DBAOq+UADBAWq
+WADBAGq+woDBAGq+xQDBAOq+ygDBAGq+zwDBAGq+1oDBAGq+24DBAGq+44wDAME
AKr7lQMEA6r7kDAMAwQBqvuaAwQBqvucAwQBqvuqAwQBqvuuAwQGrFHAAwQErFbQ
AwMBrHoDAwOswAMEA6zx+AMEBa344AMEBK6KkAMDALgWAwMAuFIDBADABVoDBADA
BdgDBADABfAwDAMEBcAIIAMEAsAIKAMEAsAIdDAMAwQFwAigAwQAwAiwMAwDBADA
CLMDBADACLQDBADACLYwCwMEA8AIuAMDAMAIAwQAwAxMMAwDBAHAELIDBADAELQD
BADAGlswDAMEAMAaXQMEAMAaXgMEAMAaYDAMAwQAwBrXAwQAwBrmAwQAwBroAwQC
wBx4MAwDBALAH3QDBADAH3wwDAMEAMAfxQMEAMAfzgMEAMAhhwMEAMAjOwMEAMAj
+AMEAMApkgMEAMApqjAMAwQBwCmyAwQBwCnEAwQAwCnLAwQAwCnOAwQAwCo0MAwD
BALAKjwDBADAKj4wDAMEAsAqVAMEAMAqVjAMAwQAwCpnAwQCwCpoAwQAwCqXAwQA
wCrtAwQAwCuuAwQAwCu5AwQAwCu9AwQAwCvGMAwDBADAK8kDBADAK8owDAMEAMAr
zwMEAcAr0DAMAwQBwCviAwQBwCvkAwQAwCvvMAsDAwDALwMEAsAvGDAMAwQAwC8d
AwQCwC8gMAwDBADALyUDBAHAL/AwDAMEAMAwbQMEAMAwbgMEAMAw+AMDAMAyMAwD
BATAMxADBATAMyAwDAMEAMAzMQMEAsAzuDAMAwQAwDO9AwQGwDOAMAwDBAHAM8ID
BATAM+AwCwMEAMAz8QMDAsAwAwQBwDRIMAwDBADANHcDBADANJYwDAMEAMA0qwME
AMA0sAMEAMA0uQMEAcA0xDAMAwQAwDZpAwQAwDZqAwQAwDaCAwQAwDaHAwQAwDaJ
AwQAwDb3AwQAwDb7AwQAwDcuAwQCwDdEAwQBwDdiAwQAwDduAwQAwDdwAwQAwDd2
AwQAwDe+AwQAwDfGAwQAwDfRMAwDBADAN9sDBADAN9wDBADAN+gDBADAN+4wDAME
AMA6CQMEAMA6EjAMAwQAwDphAwQBwDpkMAwDBADAOoUDBADAOogwDAMEAMBAywME
AMBAzDAMAwQBwEFSAwQCwEFYAwQAwEGCAwQAwEG2AwQAwEHZAwQAwEH4AwQAwEH6
AwQAwEMBAwQAwEMMAwQBwENUAwQAwEOoAwQAwEOrAwQAwEPZAwQAwEP4AwQBwERu
AwQAwESEAwQAwESLMAwDBADARKsDBADARKwDBADARLMwDAMEAMBE6wMEAcBE+AME
AMBGhwMEAMBGrjAMAwQAwEazAwQDwEawAwQAwEbYAwQAwEbbMAwDBADASAMDBADA
SPwDBADASQwwDAMEAMBJFQMEAMBJFgMEAcBJGAMEAMBJQjAMAwQAwEqLAwQAwErQ
AwQAwEx6MAwDBALATPwDBADATP4DBADATQgDBADATREDBALAUjQDBAXAUkADBADA
UmQDBADAUoQDBADAUowDBADAUo8DBADAUqEDBADAUt4DBADAUuYDBADAU2gDBAHA
U3YDBAHAU3oDBADAU50wDAMEAcBTpgMEAMBTxAMEAMBTxjAMAwQAwFPZAwQCwFPY
AwQAwFPgAwQAwFPnMAwDBADAU+0DBADAU+4wDAMEAMBURwMEAcBUSAMEAMBUWQME
AMBU2wMEAMBU5jAMAwQAwFTtAwQAwFTuMAwDBADAVPEDBADAVPIDBADAVP0DBADA
VgwDBADAVoEDBAHAVoQDBADAVqUDBAHAWAYDBADAWFADBADAWFUwDAMEAMBYZQME
AMBYZgMEAMBYdwMEAMBYuwMEAMBYvgMEAMBbswMEAMBbuQMEAMBb1QMEAMBcDwME
A8Bc+AMEAMBeKTAMAwQBwF4+AwQAwF5AAwQAwF56AwQAwF6pAwQAwF6uAwQAwF7I
AwQBwF7QAwQAwF7cAwQAwF7jAwQAwF7uMAwDBADAXvMDBADAXvQDBADAZAIDBADA
ZBYDBADAZDUDBADAZE0DBADAZFADBADAZRADBADAZVsDBADAZYYDBADAZbcDBADA
Zf4DBADAZlMDBADAZlwDBAHAZswDBADAZu8DBAHAZvoDBAHAZyoDBADAZy4DBADA
Z4IDBADAZ4QDBADAaA8DBADAaCgwDAMEAMBoKwMEAcBoLAMEAMBoUAMEAMBorAME
AcBo6AMEAcBo9gMEAMBo/AMEAMBpCjAMAwQAwGsJAwQAwGsKAwQAwGtlAwQBwGtw
MAwDBADAa6sDBADAa6wDBADAbGMDBADAbHEDBADAbOYDBADAbyADBADAb2YDBADA
b2kDBADAcNcwDAMEAMB6gwMEAMB6jAMEAMB6qwMEAMB6sAMEAMB6tAMEAMB60jAM
AwQBwHwKAwQAwHwOAwQAwHwYAwQAwHx1AwQAwHyYAwQAwHyaAwQAwIMNMAwDBADA
gxsDBADAgx4wDAMEAcCDWgMEAMCDXDAMAwQAwIP7AwQAwIP8AwQAwIQPAwQAwIQf
AwQAwIQpAwQAwIRdAwQAwIRmMAwDBADAhPcDBALAhPgDBADAhP0DBADAhQoDBADA
hQ4DBADAhRUDBADAhR8DBADAhSkDBAHAhUIDBADAh1kDBADAh1wDBADAh14wDAME
BcCHYAMEAMCHYjAMAwQAwIdlAwQAwIdsMAwDBADAh88DBADAh9ADBADAh9IDBADA
h94DBADAiCcDBADAiDswDAMEAMCIjQMEBMCIgAMEAMCKZDAMAwQBwIp2AwQBwIp8
AwQAwIq8AwQAwIr7AwQHwJCAAwQAwJKFAwQAwJKWAwQAwJK4AwQAwJK9AwQAwJLI
AwQBwJLaAwQAwJLoMAwDBADAkvsDBAHAkvwDBADAk3IwDAMEAMCTlwMEAcCTmAME
AMCT6wMEAMCT9gMEAMCT/TAMAwQCwJR0AwQBwJSkAwQAwJTdMAwDBADAlN8DBADA
lOYDBADAlRQDBADAlSQDBADAlTYDBADAlZUDBADAldEDBADAle8DBADAlhADBADA
lmADBADAlmswDAMEAMCWgQMEAsCWiAMEAMCWkAMEAMCWyAMEAMCWyjAMAwQBwJba
AwQAwJbcMAwDBAHAluoDBAHAluwDBADAlvYwDAMEAMCW+QMEAsCW+AMEAMCXgQME
AMCYRQMEAcCYVgMEAMCYdwMEAMCYkAMEAMCYkgMEAMCYxQMEAMCY1AMEAMCZCQME
AMCZXTAMAwQAwJlfAwQAwJlyAwQAwJmeAwQBwJnEMAwDBADAmd0DBADAmeQDBADA
mfswDAMEBMCaEAMEAcCaGAMEAsCcjDAMAwQAwJyRAwQAwJycAwQBwJyeAwQAwJyl
MAwDBADAnM8DBADAnNADBADAnOEDBADAnPkDBADAnaIDBADAnb8wDAMEBMCfEAME
AMCfHgMEAMCgEAMEAMCgEwMEAMCgHQMEAMCgRwMEAMCgmwMEAMCgoTAMAwQAwKCp
AwQCwKCoAwQAwKDNAwQAwKDiAwQAwKDlAwQBwKGAMAwDBAXAqSADBAHAqSgwDAME
AMCs4wMEA8Cs4DAMAwQBwKzqAwQEwKzgMAwDBADArPEDBALArPAwDAMEAMCs9QME
AMCs9jAMAwQEwK0QAwQAwK0YAwQHwK6AAwQAwLwrAwQAwLxHMAwDBADAvEkDBADA
vFAwDAMEAMC8VQMEA8C8UDAMAwQAwLxZAwQAwLxaAwQAwLxcAwQAwLxlAwQAwLxr
AwQAwLxzAwQAwLyAAwQAwLyXMAwDBAHAvKoDBADAvKwDBAHAvK4wDAMEAMC8uQME
AMC8ugMEAMC88QMEAMC9GAMEAMC9IgMEAMC9NgMEAMC9XgMEAMC9iAMEAMC9lAME
AMC9nwMEAsC90AMEAMC93zAMAwQAwL3lAwQBwL3oAwQAwL49AwQAwL5CAwQAwL5s
AwQBwL60AwQBwL7MAwQDwL7QAwMAwMADBADAwwIDBADAwwowDAMEAsDDDAMEAMDD
DgMEAMDDIjAMAwQAwMMnAwQAwMMoMAwDBALAwywDBAPAwzADBADAw2YDBADAw3AD
BADAw5gDBADAw6oDBADAw7oDBADAw8UDBADAw9sDBADAw+kDBATAxyADBATAyEAD
BAHAyyYwDAMEAMDLUQMEBcDLQAMEAMDLYzAMAwQBwMuKAwQAwMuSAwQAwMuaAwQB
wMucAwQAwMuwMAwDBADAy7cDBAHAy7gDBADAy8EDBAHAy9ADBADAy9UDBADAy9gD
BADAy+gDBADAy+sDBADAy/cDBADAzmYDBADAzmwDBADAznUwDAMEA8DOmAMEAcDO
nAMEAMDPIQMEAMDPJAMEAMDPQAMEAMDPWzAMAwQFwM9gAwQAwM9iAwQAwM9xMAwD
BADAz3cDBAHAz3gDBADAz48wDAMEAMDPlwMEAMDPngMEAMDPoQMEAMDPpQMEAMDP
uzAMAwQAwM/FAwQAwM/GAwQAwM/yAwQAwM/4AwQAwM/+AwMAwNowDAMEAMDjAQME
BMDjAAMEB8DkgAMEBMDmEAMEAMDnDwMEAMDnIgMEAMDnOwMEAMDnTQMEAMDnfzAM
AwQAwOeHAwQBwOeIAwQAwOeQMAwDBAHA56YDBADA56oDBADA57cDBADA58EDBADA
58swDAMEAMDn0wMEAMDn1AMEAMDn2AMEAMDn2gMEAMDn+AMEBcDoIAMEBcDogAME
AMDqOgMEAMDq5wMEAMDq9QMEBMDwEAMDAMD0AwQAwPULMAwDBADA9Q0DBADA9Q4w
DAMEAcD1IgMEAMD1JAMEAcD1OjAMAwQAwPVJAwQAwPVQAwQAwPVeMAwDBADA9WkD
BADA9XADBADA9ZsDBADA9aIDBADA9bkDBADA9cADBADA9cQDBADA9dAwDAMEAcD1
0gMEAcD12DAMAwQAwPXbAwQAwPXcMAwDBADA9fkDBALA9fgDBAfA+AADBATA+RAD
BAHA+SoDBADA+5QDBADA+8MDBADA+8kDBALA+8wwDAMEAMD74wMEAcD75DAMAwQE
xg8QAwQGxg8AAwQAxhEBAwQAxhEHAwQAxhFGAwQAxhFqMAwDBADGEXEDBALGEXAD
BADGEXYDBADGEeQDBAHGEfADBAHGFiIDBADGFiUwDAMEAMYWLwMEAMYWMgMEAMYW
PTAMAwQCxhsEAwQAxhsIMAwDBATGKRADBALGKRgDBALGMAADBAHGMQIDBAPGMSAD
BADGMVcDBAHGMXADBADGMXwDBALGMwQwDAMEAMYzYwMEAcYzZAMEAMYzujAMAwQA
xjPDAwQAxjPEAwQBxjPSMAwDBATGOBADBAHGOBgwDAMEAMY9AQMEAsY9AAMEA8Y9
CAMEAMZJ3AMEAMZjrQMDAMaOAwQExpCAAwQAxpS9MAwDBAbGlMADBAHGlMQDBALG
r2QDBADGs+EDBADGtI4wCwMDA8bIAwQBxsgIAwQBxvQKAwQAxvbfAwQDxwkYAwQD
xxpgAwQAxyIKAwQBxysSAwQAxystAwQAxys/AwQDx0HAMAwDBAHHpiIDBAHHpiQD
BADMS44DBADMkQAwDAMEAcyRAgMEA8yRAAMEAMyRYQMEA8yY4AMEBM2TYAMEAM2m
sQMEBM3JAAMEAc3LSgMDAM39AwQEzoPAAwQEzskAAwQGz4gAAwQEz5QgAwQGz5RA
AwQGz55AAwQEz66wAwQCz72oAwQCz724AwQD0ELoAwQC0EfUAwQD0EfgAwQC0FF0
AwQB0FemAwQD0G8wAwQF0TqgAwQE0Y0AAwQE0ZaQAwQF0dTAAwQF2AgAAwQE2Arw
AwQA2GPGAwQA2GPJAwQA2GPMAwQE2GzwAwQG2HYAAwQF2HbgAwQE2JfAAwQE2Ktw
AwQE2LfQMA0GCSqGSIb3DQEBCwUAA4IBAQBmxcdK36YtMSsjVzKlDcqhEnCirgBD
xQLMnSz0IQOmvL0NTQaPMiuDCgvOrUP0OhP+pvqzrE3aRs9LNMoY9eb/yXXWF4hP
ZeN8mxHmIwAcHZxrB4Yn7/Viy6+q+tShK7TJ84/Ppvs10v8d8KOqq4ek36yroYGY
L90g+hgEyNS1/07VNsOF6ezIIITWH15cMTXiaOxGK1lboqC/zNvhpXLq7V5kROVb
nfc8mFec8mATi5gJWzKuO14A8MrZcvGn0Zn4J1YOgDEIOG/wlKQ5+uKiTspL50Dd
WYnDVtrXkE+smKk5qeSNxXzwTCw8Ivecg9qwMWvfcRagmYudzsBdaq2N
-----END CERTIFICATE-----`

	// First, create the set of root certificates. For this example we only
	// have one. It's also possible to omit this in order to use the
	// default root set of the current operating system.
	roots := x509.NewCertPool()
	/*ok := roots.AppendCertsFromPEM([]byte(rootPEM))
	if !ok {
		fmt.Println("failed to parse root certificate")
		return
	}
	*/
	rootblock, _ := pem.Decode([]byte(rootPEM))
	if rootblock == nil {
		return
	}
	if rootblock.Type != "CERTIFICATE" || len(rootblock.Headers) != 0 {
		return
	}

	rootcert, err := x509.ParseCertificate(rootblock.Bytes)
	if err != nil {
		return
	}
	fmt.Println("rootcert unhandle")
	for _, one := range rootcert.UnhandledCriticalExtensions {
		fmt.Println(one)
	}
	rootcert.UnhandledCriticalExtensions = make([]asn1.ObjectIdentifier, 0)
	rootcert.UnknownExtKeyUsage = nil
	roots.AddCert(rootcert)

	inter := x509.NewCertPool()
	/*
		ok = inter.AppendCertsFromPEM([]byte(interPEM))
		if !ok {
			fmt.Println("failed to parse root certificate")
			return
		}
	*/
	//var interblock *pem.Block
	interblock, _ := pem.Decode([]byte(interPEM))
	if interblock == nil {
		return
	}
	if interblock.Type != "CERTIFICATE" || len(interblock.Headers) != 0 {
		return
	}

	intercert, err := x509.ParseCertificate(interblock.Bytes)
	if err != nil {
		return
	}
	fmt.Println("intercert unhandle")
	for _, one := range intercert.UnhandledCriticalExtensions {
		fmt.Println(one)
	}
	intercert.UnhandledCriticalExtensions = make([]asn1.ObjectIdentifier, 0)
	intercert.UnknownExtKeyUsage = nil
	inter.AddCert(intercert)

	block, _ := pem.Decode([]byte(certPEM))
	if block == nil {
		fmt.Println("failed to parse root certificate")
		return
	}

	cert, err := x509.ParseCertificate(block.Bytes)
	if err != nil {
		fmt.Println("failed to parse certificate: ", err)
		return
	}
	l := len(cert.UnhandledCriticalExtensions)
	fmt.Println("expected one unhandled critical extension, but found %d", l)

	//KeyUsages:=[]x509.ExtKeyUsage{x509.ExtKeyUsageClientAuth},
	opts := x509.VerifyOptions{
		Roots:         roots,
		Intermediates: inter,
		KeyUsages:     []x509.ExtKeyUsage{x509.ExtKeyUsageAny},
		//KeyUsages: []x509.ExtKeyUsage{x509.KeyUsageCertSign},
	}
	for _, one := range cert.UnhandledCriticalExtensions {
		fmt.Println(one)
	}
	cert.UnhandledCriticalExtensions = make([]asn1.ObjectIdentifier, 0)
	cert.UnknownExtKeyUsage = nil
	fmt.Println("UnhandledCriticalExtensions: len:", len(cert.UnhandledCriticalExtensions))

	if chains, err := cert.Verify(opts); err != nil {
		fmt.Println("failed to verify certificate: ", err, len(chains))
		fmt.Println("UnhandledCriticalExtensions   www: len:", len(cert.UnhandledCriticalExtensions))
		for _, one := range chains {
			fmt.Println("chains ", one)
		}
		return
	}
	fmt.Printf("Success!\n")

}
